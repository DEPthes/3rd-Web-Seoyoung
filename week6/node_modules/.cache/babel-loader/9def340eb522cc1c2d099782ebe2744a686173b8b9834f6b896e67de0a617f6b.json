{"ast":null,"code":"var _jsxFileName = \"/Users/seoyeong/Desktop/claculator2/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Display from \"./Display.jsx\";\nimport ButtonPanel from \"./ButtonPanel.jsx\";\nimport \"./Calculator.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentValue, setCurrentValue] = useState(\"0\"); //현재값 저장\n  const [previousValue, setPreviousValue] = useState(null); //이전값 저장\n  const [operator, setOperator] = useState(null); //연산자 저장\n  const [resetDisplay, setResetDisplay] = useState(false); //디스플레이 리셋 상태\n\n  //숫자버튼 클릭. 현재 값이 0이거나 디스플레이를 리셋해야 하면 number를 현재 값에 저장\n  const inputNumber = number => {\n    if (currentValue === \"0\" || resetDisplay) {\n      setCurrentValue(number);\n      setResetDisplay(false); //이어서 입력중에 리셋되지 않도록 함\n    } else {\n      setCurrentValue(currentValue + number); //아닌 경우 현재값에 이어서 숫자 작성\n    }\n  };\n\n  //소수점 클릭. 소수점이 포함되어 있지 않으면 소수점 추가\n  const inputDecimal = () => {\n    if (!currentValue.includes(\".\")) {\n      setCurrentValue(currentValue + \".\");\n    }\n  };\n\n  // 연산자 클릭. 현재값과 연산자가 null이 아닌경우 연산 시행. 결과를 현재값으로 저장.\n  const inputOperator = op => {\n    if (!resetDisplay && previousValue != null && operator) {\n      setCurrentValue(String(operate(previousValue, currentValue, operator)));\n    }\n    setPreviousValue(currentValue); //현재 값을 이전값에 저장\n    setOperator(op); //연산자를 op로 설정\n    setResetDisplay(true); //다음 숫자가 입력되면 디스플레이 다시 리셋\n  };\n\n  // =버튼 누르면 시행\n  const calculate = () => {\n    if (previousValue != null && operator && !resetDisplay) {\n      setCurrentValue(String(operate(previousValue, currentValue, operator)));\n      setPreviousValue(null);\n      setOperator(null);\n    }\n    setResetDisplay(true);\n  };\n\n  // 부호 변경 함수\n  const plusMinus = () => {\n    if (currentValue.startsWith(\"-\")) {\n      setCurrentValue(currentValue.substring(1)); //-로 시작하면 currentVlaue의 index 1부터 끝까지만 돌려줌(-만 제거)\n    } else {\n      setCurrentValue(\"-\" + currentValue);\n    }\n  };\n\n  //  % 계산\n  const percent = () => {\n    setCurrentValue(String(parseFloat(currentValue) / 100));\n  };\n\n  //연산수행 함수\n  const operate = (a, b, op) => {\n    a = parseFloat(a);\n    b = parseFloat(b); //a,b 값을 실수로 변환\n    switch (op) {\n      case \"+\":\n        return a + b;\n      case \"-\":\n        return a - b;\n      case \"*\":\n        return a * b;\n      case \"/\":\n        return a / b;\n      default:\n        return b;\n    }\n  };\n\n  //AC 버튼 클릭. 디스플레이 초기화\n  const clearDisplay = () => {\n    setCurrentValue(\"0\");\n    setPreviousValue(null);\n    setOperator(null);\n    setResetDisplay(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      value: currentValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonPanel, {\n      onNumberClick: inputNumber,\n      onOperatorClick: inputOperator,\n      onDecimalClick: inputDecimal,\n      onEqualsClick: calculate,\n      onClearClick: clearDisplay,\n      onPlusMinusClick: plusMinus,\n      onPercentClick: percent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"EPOPk5dYMGydbn/nDLFk4FzbvqM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Display","ButtonPanel","jsxDEV","_jsxDEV","App","_s","currentValue","setCurrentValue","previousValue","setPreviousValue","operator","setOperator","resetDisplay","setResetDisplay","inputNumber","number","inputDecimal","includes","inputOperator","op","String","operate","calculate","plusMinus","startsWith","substring","percent","parseFloat","a","b","clearDisplay","className","children","value","fileName","_jsxFileName","lineNumber","columnNumber","onNumberClick","onOperatorClick","onDecimalClick","onEqualsClick","onClearClick","onPlusMinusClick","onPercentClick","_c","$RefreshReg$"],"sources":["/Users/seoyeong/Desktop/claculator2/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Display from \"./Display.jsx\";\nimport ButtonPanel from \"./ButtonPanel.jsx\";\nimport \"./Calculator.css\";\n\nconst App = () => {\n  const [currentValue, setCurrentValue] = useState(\"0\"); //현재값 저장\n  const [previousValue, setPreviousValue] = useState(null); //이전값 저장\n  const [operator, setOperator] = useState(null); //연산자 저장\n  const [resetDisplay, setResetDisplay] = useState(false); //디스플레이 리셋 상태\n\n  //숫자버튼 클릭. 현재 값이 0이거나 디스플레이를 리셋해야 하면 number를 현재 값에 저장\n  const inputNumber = (number) => {\n    if (currentValue === \"0\" || resetDisplay) {\n      setCurrentValue(number);\n      setResetDisplay(false); //이어서 입력중에 리셋되지 않도록 함\n    } else {\n      setCurrentValue(currentValue + number); //아닌 경우 현재값에 이어서 숫자 작성\n    }\n  };\n\n  //소수점 클릭. 소수점이 포함되어 있지 않으면 소수점 추가\n  const inputDecimal = () => {\n    if (!currentValue.includes(\".\")) {\n      setCurrentValue(currentValue + \".\");\n    }\n  };\n\n  // 연산자 클릭. 현재값과 연산자가 null이 아닌경우 연산 시행. 결과를 현재값으로 저장.\n  const inputOperator = (op) => {\n    if (!resetDisplay && previousValue != null && operator) {\n      setCurrentValue(String(operate(previousValue, currentValue, operator)));\n    }\n    setPreviousValue(currentValue); //현재 값을 이전값에 저장\n    setOperator(op); //연산자를 op로 설정\n    setResetDisplay(true); //다음 숫자가 입력되면 디스플레이 다시 리셋\n  };\n\n  // =버튼 누르면 시행\n  const calculate = () => {\n    if (previousValue != null && operator && !resetDisplay) {\n      setCurrentValue(String(operate(previousValue, currentValue, operator)));\n      setPreviousValue(null);\n      setOperator(null);\n    }\n    setResetDisplay(true);\n  };\n\n  // 부호 변경 함수\n  const plusMinus = () => {\n    if (currentValue.startsWith(\"-\")) {\n      setCurrentValue(currentValue.substring(1)); //-로 시작하면 currentVlaue의 index 1부터 끝까지만 돌려줌(-만 제거)\n    } else {\n      setCurrentValue(\"-\" + currentValue);\n    }\n  };\n\n  //  % 계산\n  const percent = () => {\n    setCurrentValue(String(parseFloat(currentValue) / 100));\n  };\n\n  //연산수행 함수\n  const operate = (a, b, op) => {\n    a = parseFloat(a);\n    b = parseFloat(b); //a,b 값을 실수로 변환\n    switch (op) {\n      case \"+\":\n        return a + b;\n      case \"-\":\n        return a - b;\n      case \"*\":\n        return a * b;\n      case \"/\":\n        return a / b;\n      default:\n        return b;\n    }\n  };\n\n  //AC 버튼 클릭. 디스플레이 초기화\n  const clearDisplay = () => {\n    setCurrentValue(\"0\");\n    setPreviousValue(null);\n    setOperator(null);\n    setResetDisplay(false);\n  };\n\n  return (\n    <div className=\"calculator\">\n      <Display value={currentValue} />\n      <ButtonPanel\n        onNumberClick={inputNumber}\n        onOperatorClick={inputOperator}\n        onDecimalClick={inputDecimal}\n        onEqualsClick={calculate}\n        onClearClick={clearDisplay}\n        onPlusMinusClick={plusMinus}\n        onPercentClick={percent}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}